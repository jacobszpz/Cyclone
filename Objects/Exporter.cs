using System;
using System.Collections.Generic;
using System.Linq;

namespace Cyclone.Objects {
    public class Exporter {
        static Dictionary<int, string> payment = new Dictionary<int, string> {
            [Sale.CARD] = "CARD",
            [Sale.CASH] = "CASH",
            [Sale.PAYPAL] = "PAYPAL"
        };

        public Exporter() {
        }

        public static List<string> SalesReport(List<Sale> allSales) {
            List<string> report = new List<string>();

            string[] titles = { " No. ", " Client ", " Bikes ", " Earnings ", 
                " Payment ", " Client Address ", " Time Of Sale " };
            string[] totalsTitles = { " Sales ", " Bikes Sold ", " Earnings " };

            string[][][] salesTableContent = new string[allSales.Count][][];
            string[][][] totalsTableContent = new string[1][][];

            int saleIndex = 0;
            int bikesSold = 0;
            double totalEarnings = 0;
            foreach (Sale sale in allSales) {
                string[][] row = new string[titles.Length][];

                row[0] = new string[] {
                    string.Format(" {0} ", (saleIndex + 1).ToString().Trim())
                };

                row[1] = new string[] {
                    string.Format(" {0} ", sale.Buyer),
                    string.Format(" {0} ", sale.clientData.Phone),
                    string.Format(" {0} ", sale.clientData.Mail)
                };

                row[2] = new string[sale.soldBikes.Count];
                row[3] = new string[sale.bikeEarnings.Count];

                int bikeIndex = 0;
                foreach (Bike bike in sale.soldBikes) {
                    row[2][bikeIndex] = string.Format(" {0}, {1} ({2}) ", bike.Make, bike.Model, bike.SecurityCode);
                    row[3][bikeIndex] = string.Format(" ${0} ", sale.bikeEarnings[bikeIndex]);
                    totalEarnings += sale.bikeEarnings[bikeIndex];
                    bikeIndex++;
                    bikesSold++;
                }

                row[4] = new string[] {
                    string.Format(" {0} ", payment[sale.paymentType])
                };

                row[5] = new string[] {
                    string.Format(" {0} ", sale.clientData.ClientAddress.country),
                    string.Format(" {0}, {1} ", sale.clientData.ClientAddress.region, sale.clientData.ClientAddress.city),
                    string.Format(" {0} ", sale.clientData.ClientAddress.addressOne),
                    string.Format(" {0} ", sale.clientData.ClientAddress.addressTwo),
                    string.Format(" {0} ", sale.clientData.ClientAddress.postalCode)
                };

                row[6] = new string[] {
                    string.Format(" {0} ", sale.saleDate.ToString("s"))
                };

                salesTableContent[saleIndex] = row;
                saleIndex++;
            }

            totalsTableContent = new string[][][] { 
                new string[][] {
                    new string[] {
                        string.Format(" {0} ", allSales.Count.ToString().Trim())
                    },
                    new string[] {
                        string.Format(" {0} ", bikesSold.ToString().Trim())
                    },
                    new string[] {
                        string.Format(" ${0} ", totalEarnings.ToString().Trim())
                    }
                }
            };

            List<string> salesTable = GenerateTable(titles, salesTableContent);
            List<string> totalsTable = GenerateTable(totalsTitles, totalsTableContent);

            string hSeparator = CreateSeparator(salesTable[0].Length);
            report.Add(hSeparator);
            report.Add(string.Format("CYCLONE® BIKE SALES REPORT, GENERATED {0}", DateTime.Now.ToString("s")));
            report.Add(hSeparator);
            report.Add("");

            report.AddRange(salesTable);
            report.Add("");
            report.Add(" TOTALS");
            report.AddRange(totalsTable);

            report.Add("");
            report.Add(hSeparator);
            report.Add("GENERATED BY CYCLONE®, SÁNCHEZ INDUSTRIES");
            report.Add("THANK YOU FOR YOUR PREFERENCE");
            return report;
        }

        public static List<string> PurchasesReport(List<Bike> purchasedBikes) {
            List<string> report = new List<string>();

            string[] titles = { " No. ", " Bike ", " Bike Type ", 
                " Cost ", " Purchase Date " };
            string[] totalsTitles = { " Purchases ", " Expenses " };

            string[][][] purchaseTableContent = new string[purchasedBikes.Count][][];
            string[][][] totalsTableContent = new string[1][][];

            int bikeIndex = 0;
            double totalExpenses = 0;

            foreach (Bike bike in purchasedBikes) {
                string[][] row = new string[titles.Length][];

                row[0] = new string[] {
                    string.Format(" {0} ", (bikeIndex + 1).ToString().Trim())
                };

                row[1] = new string[] {
                    string.Format(" {0}, {1} ({2}) ", bike.Make, bike.Model, bike.SecurityCode)
                };

                row[2] = new string[] {
                    string.Format(" {0} ", bike.Type)
                };

                row[3] = new string[] {
                    string.Format(" ${0} ", bike.Cost)
                };

                totalExpenses += bike.Cost;

                row[4] = new string[] {
                    // Date
                    string.Format(" {0} ", bike.PurchaseDate)
                };

                purchaseTableContent[bikeIndex] = row;
                bikeIndex++;
            }

            totalsTableContent = new string[][][] { 
                new string[][] {
                    new string[] {
                        string.Format(" {0} ", purchasedBikes.Count.ToString().Trim())
                    },
                    new string[] {
                        string.Format(" ${0} ", totalExpenses.ToString().Trim())
                    }
                }
            };

            List<string> salesTable = GenerateTable(titles, purchaseTableContent);
            List<string> totalsTable = GenerateTable(totalsTitles, totalsTableContent);

            string hSeparator = CreateSeparator(salesTable[0].Length);
            report.Add(hSeparator);
            report.Add(string.Format("CYCLONE® BIKE PURCHASES REPORT, GENERATED {0}", DateTime.Now.ToString("s")));
            report.Add(hSeparator);
            report.Add("");

            report.AddRange(salesTable);
            report.Add("");
            report.Add(" TOTALS");
            report.AddRange(totalsTable);

            report.Add("");
            report.Add(hSeparator);
            report.Add("GENERATED BY CYCLONE®, SÁNCHEZ INDUSTRIES");
            report.Add("THANK YOU FOR YOUR PREFERENCE");
            return report;
        }

        public static List<string> RentalsReport(List<Rent> selectedRentals) {
            List<string> report = new List<string>();

            string[] titles = { " No. ", " Client ", " Bikes ", " Earnings ", 
                " Payment ", " Client Address ", " Rental Duration " };
            string[] totalsTitles = { " Rentals ", " Bikes Rented ", " Earnings " };

            string[][][] rentTableContent = new string[selectedRentals.Count][][];
            string[][][] totalsTableContent = new string[1][][];

            int rentIndex = 0;
            int bikesRented = 0;
            double totalEarnings = 0;
            foreach (Rent rent in selectedRentals) {
                string[][] row = new string[titles.Length][];

                row[0] = new string[] {
                    string.Format(" {0} ", (rentIndex + 1).ToString().Trim())
                };

                row[1] = new string[] {
                    string.Format(" {0} ", rent.Renter),
                    string.Format(" {0} ", rent.clientData.Phone),
                    string.Format(" {0} ", rent.clientData.Mail)
                };

                row[2] = new string[rent.rentedBikes.Count];

                int bikeIndex = 0;
                foreach (Bike bike in rent.rentedBikes) {
                    row[2][bikeIndex] = string.Format(" {0}, {1} ({2}) ", bike.Make, bike.Model, bike.SecurityCode);
                    bikeIndex++;
                    bikesRented++;
                }

                if (rent.concluded) {
                    totalEarnings += rent.rentEarnings;
                    row[3] = new string[] {
                        string.Format(" ${0} ", rent.rentEarnings)
                    };
                } else {
                    row[3] = new string[] {
                        " TBD "
                    };
                }

                row[4] = new string[] {
                    string.Format(" {0} ", payment[rent.paymentType])
                };

                row[5] = new string[] {
                    string.Format(" {0} ", rent.clientData.ClientAddress.country),
                    string.Format(" {0}, {1} ", rent.clientData.ClientAddress.region, rent.clientData.ClientAddress.city),
                    string.Format(" {0} ", rent.clientData.ClientAddress.addressOne),
                    string.Format(" {0} ", rent.clientData.ClientAddress.addressTwo),
                    string.Format(" {0} ", rent.clientData.ClientAddress.postalCode)
                };

                if (rent.concluded) {
                    row[6] = new string[] {
                        " FROM: ",
                        string.Format(" {0} ", rent.rentStartDate.ToString("s")),
                        " TO: ",
                        string.Format(" {0} ", rent.rentEndDate.ToString("s")),
                        string.Format(" DURATION : {0}", rent.duration.ToString("c"))
                    };
                } else {
                    row[6] = new string[] {
                        " FROM: ",
                        string.Format(" {0} ", rent.rentStartDate.ToString("s")),
                        " (IN PROGRESS) "
                    };
                }

                rentTableContent[rentIndex] = row;
                rentIndex++;
            }

            totalsTableContent = new string[][][] { 
                new string[][] {
                    new string[] {
                        string.Format(" {0} ", selectedRentals.Count.ToString().Trim())
                    },
                    new string[] {
                        string.Format(" {0} ", bikesRented.ToString().Trim())
                    },
                    new string[] {
                        string.Format(" ${0} ", totalEarnings.ToString().Trim())
                    }
                }
            };

            List<string> salesTable = GenerateTable(titles, rentTableContent);
            List<string> totalsTable = GenerateTable(totalsTitles, totalsTableContent);

            string hSeparator = CreateSeparator(salesTable[0].Length);
            report.Add(hSeparator);
            report.Add(string.Format("CYCLONE® BIKE RENTALS REPORT, GENERATED {0}", DateTime.Now.ToString("s")));
            report.Add(hSeparator);
            report.Add("");

            report.AddRange(salesTable);
            report.Add("");
            report.Add(" TOTALS");
            report.AddRange(totalsTable);

            report.Add("");
            report.Add(hSeparator);
            report.Add("GENERATED BY CYCLONE®, SÁNCHEZ INDUSTRIES");
            report.Add("THANK YOU FOR YOUR PREFERENCE");
            return report;
        }

        private static string CreateSeparator(int length) {
            string separator = "";
            for (int i = 0; i < length; i++) {
                separator += "-";
            }
            return separator;
        }

        public static List<string> GenerateTable(string[] titles, string[][][] tableBody) {
            List<string> report = new List<string>();

            int[] maxLengths = new int[titles.Length];

            // Obtain max lengths for all columns
            for (int column = 0; column < titles.Length; column++) {
                List<int> allLenghts= new List<int> { titles[column].Length };

                foreach (string[][] row in tableBody) {
                    string[] cell = row[column];
                    allLenghts.Add(cell.Max(x => x.Length));
                }
                maxLengths[column] = allLenghts.Max();
            }

            string hSeparator = CreateSeparator(maxLengths.Sum() + titles.Length + 1);

            // Add table titles
            string tableHeader = "";
            for (int column = 0; column < titles.Length; column++) {
                tableHeader += "|";
                tableHeader += titles[column].PadRight(maxLengths[column]);
            }

            tableHeader += "|";
            report.Add(hSeparator);
            report.Add(tableHeader);
            report.Add(hSeparator);

            // Add rows
            foreach (string[][] row in tableBody) {
                int maxRowLines = row.Max(x => x.Length);
                for (int line = 0; line < maxRowLines; line++) {
                    string newLine = "";
                    for (int column = 0; column < titles.Length; column++) {
                        newLine += "|";
                        string field = "";

                        if (row[column].Length > line) {
                            field = row[column][line];
                        }

                        newLine += field.PadRight(maxLengths[column]); 
                    }
                    newLine += "|";
                    report.Add(newLine);
                }

                report.Add(hSeparator);
            }

            return report;
        }
    }
}
